// Code generated by hertz generator.

package user

import (
	"context"
	"dous/biz/model/query"
	"dous/biz/orm_gen"
	"github.com/cloudwego/hertz/pkg/common/utils"

	user "dous/biz/model/hertz/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserIfmtResponse .
// @router /douyin/user [POST]
func UserIfmtResponse(ctx context.Context, c *app.RequestContext) {
	c.JSON(consts.StatusOK, utils.H{
		"message": "pong",
	})
}

// UserLoginResponse .
// @router /douyin/user/login/ [POST]
func UserLoginResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DouyinUserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserRegisterResponse .
// @router /douyin/user/register/ [POST]
func UserRegisterResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DouyinUserRegisterResponse)

	user1 := orm_gen.User{
		Name:     req.Username,
		Password: req.Password,
	}
	err = query.User.WithContext(ctx).Create(&user1)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		resp.UserId = 1
		resp.Token = "1"
		c.JSON(200, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "true"
	resp.UserId = 1
	resp.Token = "1"

	c.JSON(consts.StatusOK, resp)
}
